<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="41" tokens="258">
<file line="161" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\AbstractCompounds.java"/>
<file line="583" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<codefragment>
<![CDATA[
		public boolean unify(PrologTerm term) {
			PrologTerm thisTerm = this;
			PrologTerm otherTerm = term;
			if (thisTerm == otherTerm) {
				return true;
			} else if (thisTerm.isVariable()) {
				if (thisTerm == thisTerm.getTerm()) {
					return true;
				}
				return thisTerm.getTerm().unify(otherTerm);
			} else if (otherTerm.isVariable()) {
				if (otherTerm == otherTerm.getTerm()) {
					return true;
				}
				return otherTerm.getTerm().unify(thisTerm);
			} else if (otherTerm.isCompound()) {
				int thisArity = thisTerm.getArity();
				int otherArity = otherTerm.getArity();
				String thisFunctor = thisTerm.getFunctor();
				String otherFunctor = otherTerm.getFunctor();
				if (thisFunctor.equals(otherFunctor) && thisArity == otherArity) {
					PrologTerm[] thisArguments = thisTerm.getArguments();
					PrologTerm[] otherArguments = otherTerm.getArguments();
					if (thisArguments.length == otherArguments.length) {
						for (int i = 0; i < thisArguments.length; i++) {
							if (thisArguments[i] != null && otherArguments[i] != null) {
								PrologTerm thisArgument = thisArguments[i];
								PrologTerm otherArgument = otherArguments[i];
								if (!thisArgument.unify(otherArgument)) {
									return false;
								}
							}
						}
						return true;
					}
					return false;
				}
				return false;
			}
			return false;
		}
]]>
</codefragment>
</duplication>
<duplication lines="49" tokens="227">
<file line="113" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\AbstractCompounds.java"/>
<file line="638" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<codefragment>
<![CDATA[
		public int compareTo(PrologTerm term) {
			PrologTerm thisCompound = this;
			PrologTerm otherCompound = term;

			if (!otherCompound.isCompound()) {
				if (otherCompound.isEmptyList() && thisCompound.isEmptyList()) {
					return 0;
				}
				return 1;
			}

			if (otherCompound.isEmptyList() && thisCompound.isEmptyList()) {
				return 0;
			}

			// comparison by arity
			if (thisCompound.getArity() < otherCompound.getArity()) {
				return -1;
			} else if (thisCompound.getArity() > otherCompound.getArity()) {
				return 1;
			}

			// alphabetic functor comparison
			int result = thisCompound.getFunctor().compareTo(otherCompound.getFunctor());
			if (result < 0) {
				return -1;
			} else if (result > 0) {
				return 1;
			}

			// arguments comparison
			PrologTerm[] thisArguments = thisCompound.getArguments();
			PrologTerm[] otherArguments = otherCompound.getArguments();

			for (int i = 0; i < thisArguments.length; i++) {
				PrologTerm thisArgument = thisArguments[i];
				PrologTerm otherArgument = otherArguments[i];
				if (thisArgument != null && otherArgument != null) {
					result = thisArgument.compareTo(otherArgument);
					if (result != 0) {
						return result;
					}
				}
			}

			return 0;
		}

		public final boolean isClause() {
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="161">
<file line="159" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\AbstractCompounds.java"/>
<file line="236" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<codefragment>
<![CDATA[
	}

	public final boolean unify(PrologTerm term) {
		PrologTerm thisTerm = this;
		PrologTerm otherTerm = term;
		if (thisTerm == otherTerm) {
			return true;
		} else if (thisTerm.isVariable()) {
			if (thisTerm == thisTerm.getTerm()) {
				return true;
			}
			return thisTerm.getTerm().unify(otherTerm);
		} else if (otherTerm.isVariable()) {
			if (otherTerm == otherTerm.getTerm()) {
				return true;
			}
			return otherTerm.getTerm().unify(thisTerm);
		} else if (otherTerm.isCompound()) {
			int thisArity = thisTerm.getArity();
			int otherArity = otherTerm.getArity();
			String thisFunctor = thisTerm.getFunctor();
			String otherFunctor = otherTerm.getFunctor();
			if (thisFunctor.equals(otherFunctor) && thisArity == otherArity) {
				PrologTerm[] thisArguments = new PrologTerm[0];
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="158">
<file line="238" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<file line="583" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<codefragment>
<![CDATA[
		public boolean unify(PrologTerm term) {
			PrologTerm thisTerm = this;
			PrologTerm otherTerm = term;
			if (thisTerm == otherTerm) {
				return true;
			} else if (thisTerm.isVariable()) {
				if (thisTerm == thisTerm.getTerm()) {
					return true;
				}
				return thisTerm.getTerm().unify(otherTerm);
			} else if (otherTerm.isVariable()) {
				if (otherTerm == otherTerm.getTerm()) {
					return true;
				}
				return otherTerm.getTerm().unify(thisTerm);
			} else if (otherTerm.isCompound()) {
				int thisArity = thisTerm.getArity();
				int otherArity = otherTerm.getArity();
				String thisFunctor = thisTerm.getFunctor();
				String otherFunctor = otherTerm.getFunctor();
				if (thisFunctor.equals(otherFunctor) && thisArity == otherArity) {
					PrologTerm[] thisArguments = thisTerm.getArguments();
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="149">
<file line="111" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\AbstractCompounds.java"/>
<file line="303" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<codefragment>
<![CDATA[
	}

	public final int compareTo(PrologTerm term) {
		PrologTerm thisCompound = this;
		PrologTerm otherCompound = term;

		if (!otherCompound.isCompound()) {
			if (otherCompound.isEmptyList() && thisCompound.isEmptyList()) {
				return 0;
			}
			return 1;
		}

		if (otherCompound.isEmptyList() && thisCompound.isEmptyList()) {
			return 0;
		}

		// comparison by arity
		if (thisCompound.getArity() < otherCompound.getArity()) {
			return -1;
		} else if (thisCompound.getArity() > otherCompound.getArity()) {
			return 1;
		}

		// alphabetic functor comparison
		int result = thisCompound.getFunctor().compareTo(otherCompound.getFunctor());
		if (result < 0) {
			return -1;
		} else if (result > 0) {
			return 1;
		}

		// arguments comparison
		PrologTerm[] thisArguments = new PrologTerm[0];
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="146">
<file line="305" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<file line="638" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<codefragment>
<![CDATA[
		public int compareTo(PrologTerm term) {
			PrologTerm thisCompound = this;
			PrologTerm otherCompound = term;

			if (!otherCompound.isCompound()) {
				if (otherCompound.isEmptyList() && thisCompound.isEmptyList()) {
					return 0;
				}
				return 1;
			}

			if (otherCompound.isEmptyList() && thisCompound.isEmptyList()) {
				return 0;
			}

			// comparison by arity
			if (thisCompound.getArity() < otherCompound.getArity()) {
				return -1;
			} else if (thisCompound.getArity() > otherCompound.getArity()) {
				return 1;
			}

			// alphabetic functor comparison
			int result = thisCompound.getFunctor().compareTo(otherCompound.getFunctor());
			if (result < 0) {
				return -1;
			} else if (result > 0) {
				return 1;
			}

			// arguments comparison
			PrologTerm[] thisArguments = thisCompound.getArguments();
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="145">
<file line="145" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologHashMap.java"/>
<file line="93" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologLinkedMap.java"/>
<codefragment>
<![CDATA[
			table = new HashLinkedEntry[newCapacity];
			for (int i = 0; i < oldTable.length; i++) {
				if (oldTable[i] != null) {
					HashEntry<K, V> e = oldTable[i];
					put(e.getKey(), e.getValue());
				}
			}

		}

		return old;

	}

	public V remove(Object key) {
		int hash = key.hashCode();
		int index = indexOf(hash);
		HashEntry<K, V> e = table[index];
		V v = e.getValue();
		table[index] = null;
		size--;
		return v;
	}

	public void clear() {
		size = 0;
		int i = 0;
		while (i < table.length) {
			table[i++] = null;
		}
	}
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="128">
<file line="273" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<file line="606" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologInternalMap.java"/>
<codefragment>
<![CDATA[
					if (thisArguments.length == otherArguments.length) {
						for (int i = 0; i < thisArguments.length; i++) {
							if (thisArguments[i] != null && otherArguments[i] != null) {
								PrologTerm thisArgument = thisArguments[i];
								PrologTerm otherArgument = otherArguments[i];
								if (!thisArgument.unify(otherArgument)) {
									return false;
								}
							}
						}
						return true;
					}
					return false;
				}
				return false;
			}
			return false;
		}

		public Map<String, PrologTerm> match(PrologTerm term) {
			// TODO Auto-generated method stub
			return null;
		}

		public PrologProvider getProvider() {
			return provider;
		}

		public <T extends PrologTerm> T cast() {
			return (T) this;
		}

		public int compareTo(PrologTerm term) {
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="100">
<file line="126" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologHashMap.java"/>
<file line="74" path="C:\Users\Jose Zalacain\Documents\eclipse-java-photon-workspace\prolobjectlink-jpi\src\main\java\io\github\prolobjectlink\prolog\PrologLinkedMap.java"/>
<codefragment>
<![CDATA[
		HashLinkedEntry<K, V> entry = new HashLinkedEntry<K, V>(key, value);
		V old = table[index] != null ? table[index].getValue() : null;
		if (old != null) {
			table[index].setValue(value);
		} else {
			table[index] = entry;
			size++;
		}

		float loadFactor = 0.75f;
		int capacity = table.length;
		if (size >= capacity * loadFactor) {

			// rehashing and copy

			int newCapacity = 2 * capacity;
			HashEntry<K, V>[] oldTable = table;

			size = 0;
			table = new HashLinkedEntry[newCapacity];
]]>
</codefragment>
</duplication>
</pmd-cpd>